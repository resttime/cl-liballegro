[[http://liballeg.org/images/logo.png]]

* cl-liballegro
Interface and bindings to the [[https://liballeg.org/][Allegro 5 game programming library]]

Check out how the [[https://github.com/resttime/cl-liballegro/tree/master/src][bindings' source code]] is organized and compare it to
the [[https://liballeg.org/a5docs/trunk/][API reference]].

* Requires
libffi

* Usage
1. `al_*` becomes `al:*`
2. `(al:rest secs)` is `(al:rest-time secs)` because of symbol interference with #'cl:rest.
3. Enums/constants are shortened, check [[https://github.com/resttime/cl-liballegro/tree/master/src/constants.lisp][constants.lisp]] if you need help finding them.
4. Type names have changed too, check [[https://github.com/resttime/cl-liballegro/tree/master/src/types.lisp][types.lisp]] if you need help finding them.
5. To access slots from a C struct, you can use CFFI:MEM-REF create a plist
 #+BEGIN_SRC lisp
   (defcstruct display-mode
     (width :int)
     (height :int)
     (format :int)
     (refresh-rate :int))

   (with-foreign-object (test '(:struct display-mode))
     (let ((plist (mem-ref test '(:struct display-mode))))
       (print plist)
       (print (getf plist 'width))))
 #+END_SRC
6. I've got a neat OPTIONAl lispy interface [[https://github.com/resttime/cl-liballegro/tree/master/src/interface/interface.lisp][here]]
7. Everything else is pretty much 1-to-1
8. If you're getting crashes on MacOS, put all your code into [[https://common-lisp.net/project/cffi/manual/html_node/defcallback.html][callback]] and pass it to [[https://www.allegro.cc/manual/5/al_run_main][al:run-main]].
9. Examples exist if you get lost

*Feel free to raise an issue to request a feature or for me to work on something*

* Functionality
Pretty much complete except:

*I won't work on the following sections because Common Lisp has more
suitable implementations unless there's a usecase or I'm bored.*
 * Filesystem
 * Memory
 * Threads
 * UTF-8

* FAQ
** Why can't my program find the DLL in Windows?

There are path problems in Windows because the DLL files (which
contain all the functions the CFFI calls upon) doesn't have a default
location unlike in Unix environments. When the library loads in
Windows, *it will look for the DLL in the current folder of the FILE.LISP that evaluates (ql:quickload "cl-liballegro")*
This means you must have a copy of the DLL file in the directory of
FILE.LISP, not in the cl-liballegro directory unless the FILE.LISP is
in there. SLIME however, likes to change the default search folder to
the one Emacs is in when it starts.

*** With SBCL
#+BEGIN_SRC
;; Open command prompt in the folder that contains both the DLL and game.lisp`
> sbcl
> (load "game.lisp") ; File contains (ql:quickload "cl-liballegro")
#+END_SRC

*** With Emacs + SLIME
/game.lisp contains (ql:quickload :cl-liballegro)/
#+BEGIN_SRC
;; Looks for the DLL at /path/to/Desktop/allegro.dll
C-x C-f /path/to/Desktop/file9.lisp
M-x slime
C-x C-f /path/to/Desktop/game/game.lisp
C-c C-l
#+END_SRC

#+BEGIN_SRC
;; Looks for the DLL at /path/to/Desktop/game/allegro.dll
C-x C-f /path/to/Desktop/file9.lisp
C-x C-f /path/to/Desktop/game/game.lisp
M-x slime
C-c C-l
#+END_SRC

#+BEGIN_SRC
;; Looks for the DLL at /whatever/default/emacs/directory/allegro.dll
M-x slime
C-x C-f /path/to/Desktop/game/game.lisp
C-c C-l
#+END_SRC
